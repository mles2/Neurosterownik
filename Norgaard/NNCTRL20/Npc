             ---------------------------------------------------------
                      
             OVERVIEW OF FILES ASSOCIATED WITH SIMULATE NEURAL NETWORK
                          BASED PREDICTIVE CONTROL
                   
             ---------------------------------------------------------
                    
MATLAB tools for simulating nonlinear predictive control of a process modelled
by a neural network.


                                  --OO--
          

DESCRIPTION                       
The principle of Generalized Predictive Control (GPC) to minimize the following
criterion at each iteration

                     N2                              Nu
                    ---         ^        2           ---                    2
       J(t,U)  =    >   (r(t+k)-y(t+k|t))   +  rho * >   (u(t+k-1)-u(t+k-2))
                    ---                              --- 
                    k=N1                             k=1
        
w.r.t. the Nu future controls u(t),...., u(t+Nu-1) and subject to the
constraint that the controls remain constant for Nu<=k<=N2.

Two different iterative minimization algorithms have been implemented:
A Newton based Levenberg-Marquardt method and a Quasi-Newton method where the
inverse Hessian is approximated directly using the BFGS-algorithm.

The process to be controlled can be a SIMULINK model or a model described by a
set of differential equations specified in a MATLAB-function. If the training
data has been obtained from a "real world" experiment (i.e., a MATLAB/SIMULINK
model is not available) model is not available the closed-loop system can also
be simulated by using the network model for simulating the process.

The NNARX model can be generated with the functions available in the
NNSYSID toolbox.


                                --OO--



FILE OVERWIEW:
Npc      - This file.
npccon1  - Predictive control using a Quasi-Newton algorithm for minimizing
           the criterion.
npccon2  - Predictive control using a Newton based Levenberg-Marquardt
           algorithm for minimizing the criterion.        
npcinit  - File containing design parameters for npccon1 and npccon2.
predtest - A small test example


The following functions must be available as well:
NNSYSID toolbox                    - Neural Network Based System Identification
shift, siggener                    - Functions used by npccon1, npccon2, and
                                     npccon3
apccon, smout, springm, spm1       - Files used for demonstration


                                --OO--
                                 
SUGGESTED WORKING PROCEDURE FOR TESTING THE CONCEPT ON A KNOWN PROCESS

1: BUILD THE PROCESS
Build the process in SIMULINK or write the differential equations in a
MATLAB-function. If SIMULINK is used, specify input to and output from the
model by an inport and an outport, respectively. If SIMULINK is not available, 
write the differential equations in a MATLAB-function in the format required
by the ODE45 differential equation solver.

2: MAKE AN EXPERIMENT
Use the function 'experim' for generating a data set to be used
for inferring a neural network model of the process.

3. IDENTIFY A MODEL OF THE PROCESS
Identify a neural network model with the 'nnarx' function found in the NNSYSID
toolbox. The model is used for providing the multi-step predictions necessary
for computing the sequence of future controls.

4: SIMULATION OF THE CLOSED-LOOP SYSTEM
The closed-loop system is simulated using one of the functions 'npccon1' or
'npccon2'. The design parameters necessary for running these programs must be
defined in 'npcinit'. For example, the user must specify the name of
MATLAB/SIMULINK model, controller design, sampling period, horizons, penalty
factor, reference signal and name of file containing architecture and
weights of NNARX model.
