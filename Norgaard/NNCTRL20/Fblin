            ---------------------------------------------------------------
            OVERVIEW OF FILES ASSOCIATED WITH SIMULATION OF CONTROL SYSTEMS
                 BASED ON THE PRINCIPLE OF FEEDBACK LINEARIZATION
            ---------------------------------------------------------------
                    
MATLAB functions for simulating control by input-output linearization. The
controller is based on a neural network model of the process.
 
 
                                 --OO--
                                 

DESCRIPTION                              
Assume that the process to be controlled has been modelled by a neural network
with the following architecture:

     y(t) = f(y(t-1),...,y(t-na),u(t-2),...,u(t-nb))
                            + g(y(t-1),...,y(t-na),u(t-2),..,u(t-nb))*u(t-1)

Choosing the "virtual control" w as a suitable linear combination of past 
outputs the closed-loop poles can be situated arbitrarily by using the control
signal:
                w(t)-f(.)
         u(t) = ---------
                  g(.)
 

The process to be controlled can be a SIMULINK model or a model described by a
set of differential equations specified in a MATLAB-function. If the training
data is obtained through a "real world" experiment (i.e., a MATLAB/SIMULINK
model is not available), the closed-loop system can also be simulated assuming
that the network model is a perfect description of the system to be controlled.


                                 --OO--


FILE OVERVIEW:
Fblin    - This file.
fblcon   - Control system simulation program.
fblinit  - File containing design parameters for 'fblcon'.
fbltest  - A program for demonstrating 'fblcon'.

The following functions must be available as well:
NNSYSID toolbox
shift, siggener                    - Functions used by 'fblcon'
smout, springm, spm1               - Files used for demonstration

                                 --OO--


SUGGESTED WORKING PROCEDURE FOR TESTING THE CONCEPT ON A KNOWN PROCESS

1: BUILD THE PROCESS
Build the process in SIMULINK or write the differential equations in a
MATLAB-function. If SIMULINK is used, specify input to and output from the
model by an inport and an outport, respectively. If SIMULINK is not available, 
write the differential equations in a MATLAB-function in the format required
by the ODE45 differential equation solver.

2: MAKE AN EXPERIMENT
Use the function 'experim' for generating a data set to be used
for inferring a neural network model of the process.

3: IDENTIFY A MODEL OF THE PROCESS
Select the network architectures necessary for being able to model the two
functions 'f' and 'g' and call the function 'nniol' in the NNSYSID toolbox to
train the network. Use the function 'ioleval' to validate the trained
network. 

4: SIMULATION OF CLOSED-LOOP SYSTEM
The closed-loop system is simulated with the function 'fblcon'. The design
parameters necessary for running this program must be defined in the file
'fblinit'. For example, the user must specify the name of the
MATLAB/SIMULINK model, sampling period, desired characteristic polynomial of
closed-loop system, reference signal, and the name of the file containing
network architecture and weights. 
